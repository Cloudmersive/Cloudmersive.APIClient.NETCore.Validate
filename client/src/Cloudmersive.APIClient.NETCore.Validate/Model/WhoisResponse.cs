/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.Validate.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.Validate.Model
{
    /// <summary>
    /// Result of a WHOIS operation
    /// </summary>
    [DataContract]
    public partial class WhoisResponse :  IEquatable<WhoisResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WhoisResponse" /> class.
        /// </summary>
        /// <param name="ValidDomain">True if the domain is valid, false if it is not.</param>
        /// <param name="RegistrantName">Name of the domain registrant.</param>
        /// <param name="RegistrantOrganization">Organization name of the domain registrant.</param>
        /// <param name="RegistrantEmail">Email address of the domain registrant.</param>
        /// <param name="RegistrantStreetNumber">Street number of the address of the domain registrant, if available.</param>
        /// <param name="RegistrantStreet">Street name of the address of the domain registrant, if available.</param>
        /// <param name="RegistrantCity">City of the domain registrant, if available.</param>
        /// <param name="RegistrantStateOrProvince">State or Province of the address of the domain registrant, if available.</param>
        /// <param name="RegistrantPostalCode">Postal code of the address of the domain registrant, if available.</param>
        /// <param name="RegistrantCountry">Country of the address of the domain registrant, if available.</param>
        /// <param name="RegistrantRawAddress">Raw address string of the domain registrant, if available.</param>
        /// <param name="RegistrantTelephone">Telephone number of the address of the domain registrant.</param>
        /// <param name="WhoisServer">Server used to lookup WHOIS information (may change based on lookup)..</param>
        /// <param name="RawTextRecord">WHOIS raw text record.</param>
        /// <param name="CreatedDt">Creation date for the record.</param>
        public WhoisResponse(bool? ValidDomain = default(bool?), string RegistrantName = default(string), string RegistrantOrganization = default(string), string RegistrantEmail = default(string), string RegistrantStreetNumber = default(string), string RegistrantStreet = default(string), string RegistrantCity = default(string), string RegistrantStateOrProvince = default(string), string RegistrantPostalCode = default(string), string RegistrantCountry = default(string), string RegistrantRawAddress = default(string), string RegistrantTelephone = default(string), string WhoisServer = default(string), string RawTextRecord = default(string), DateTime? CreatedDt = default(DateTime?))
        {
            this.ValidDomain = ValidDomain;
            this.RegistrantName = RegistrantName;
            this.RegistrantOrganization = RegistrantOrganization;
            this.RegistrantEmail = RegistrantEmail;
            this.RegistrantStreetNumber = RegistrantStreetNumber;
            this.RegistrantStreet = RegistrantStreet;
            this.RegistrantCity = RegistrantCity;
            this.RegistrantStateOrProvince = RegistrantStateOrProvince;
            this.RegistrantPostalCode = RegistrantPostalCode;
            this.RegistrantCountry = RegistrantCountry;
            this.RegistrantRawAddress = RegistrantRawAddress;
            this.RegistrantTelephone = RegistrantTelephone;
            this.WhoisServer = WhoisServer;
            this.RawTextRecord = RawTextRecord;
            this.CreatedDt = CreatedDt;
        }
        
        /// <summary>
        /// True if the domain is valid, false if it is not
        /// </summary>
        /// <value>True if the domain is valid, false if it is not</value>
        [DataMember(Name="ValidDomain", EmitDefaultValue=false)]
        public bool? ValidDomain { get; set; }

        /// <summary>
        /// Name of the domain registrant
        /// </summary>
        /// <value>Name of the domain registrant</value>
        [DataMember(Name="RegistrantName", EmitDefaultValue=false)]
        public string RegistrantName { get; set; }

        /// <summary>
        /// Organization name of the domain registrant
        /// </summary>
        /// <value>Organization name of the domain registrant</value>
        [DataMember(Name="RegistrantOrganization", EmitDefaultValue=false)]
        public string RegistrantOrganization { get; set; }

        /// <summary>
        /// Email address of the domain registrant
        /// </summary>
        /// <value>Email address of the domain registrant</value>
        [DataMember(Name="RegistrantEmail", EmitDefaultValue=false)]
        public string RegistrantEmail { get; set; }

        /// <summary>
        /// Street number of the address of the domain registrant, if available
        /// </summary>
        /// <value>Street number of the address of the domain registrant, if available</value>
        [DataMember(Name="RegistrantStreetNumber", EmitDefaultValue=false)]
        public string RegistrantStreetNumber { get; set; }

        /// <summary>
        /// Street name of the address of the domain registrant, if available
        /// </summary>
        /// <value>Street name of the address of the domain registrant, if available</value>
        [DataMember(Name="RegistrantStreet", EmitDefaultValue=false)]
        public string RegistrantStreet { get; set; }

        /// <summary>
        /// City of the domain registrant, if available
        /// </summary>
        /// <value>City of the domain registrant, if available</value>
        [DataMember(Name="RegistrantCity", EmitDefaultValue=false)]
        public string RegistrantCity { get; set; }

        /// <summary>
        /// State or Province of the address of the domain registrant, if available
        /// </summary>
        /// <value>State or Province of the address of the domain registrant, if available</value>
        [DataMember(Name="RegistrantStateOrProvince", EmitDefaultValue=false)]
        public string RegistrantStateOrProvince { get; set; }

        /// <summary>
        /// Postal code of the address of the domain registrant, if available
        /// </summary>
        /// <value>Postal code of the address of the domain registrant, if available</value>
        [DataMember(Name="RegistrantPostalCode", EmitDefaultValue=false)]
        public string RegistrantPostalCode { get; set; }

        /// <summary>
        /// Country of the address of the domain registrant, if available
        /// </summary>
        /// <value>Country of the address of the domain registrant, if available</value>
        [DataMember(Name="RegistrantCountry", EmitDefaultValue=false)]
        public string RegistrantCountry { get; set; }

        /// <summary>
        /// Raw address string of the domain registrant, if available
        /// </summary>
        /// <value>Raw address string of the domain registrant, if available</value>
        [DataMember(Name="RegistrantRawAddress", EmitDefaultValue=false)]
        public string RegistrantRawAddress { get; set; }

        /// <summary>
        /// Telephone number of the address of the domain registrant
        /// </summary>
        /// <value>Telephone number of the address of the domain registrant</value>
        [DataMember(Name="RegistrantTelephone", EmitDefaultValue=false)]
        public string RegistrantTelephone { get; set; }

        /// <summary>
        /// Server used to lookup WHOIS information (may change based on lookup).
        /// </summary>
        /// <value>Server used to lookup WHOIS information (may change based on lookup).</value>
        [DataMember(Name="WhoisServer", EmitDefaultValue=false)]
        public string WhoisServer { get; set; }

        /// <summary>
        /// WHOIS raw text record
        /// </summary>
        /// <value>WHOIS raw text record</value>
        [DataMember(Name="RawTextRecord", EmitDefaultValue=false)]
        public string RawTextRecord { get; set; }

        /// <summary>
        /// Creation date for the record
        /// </summary>
        /// <value>Creation date for the record</value>
        [DataMember(Name="CreatedDt", EmitDefaultValue=false)]
        public DateTime? CreatedDt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WhoisResponse {\n");
            sb.Append("  ValidDomain: ").Append(ValidDomain).Append("\n");
            sb.Append("  RegistrantName: ").Append(RegistrantName).Append("\n");
            sb.Append("  RegistrantOrganization: ").Append(RegistrantOrganization).Append("\n");
            sb.Append("  RegistrantEmail: ").Append(RegistrantEmail).Append("\n");
            sb.Append("  RegistrantStreetNumber: ").Append(RegistrantStreetNumber).Append("\n");
            sb.Append("  RegistrantStreet: ").Append(RegistrantStreet).Append("\n");
            sb.Append("  RegistrantCity: ").Append(RegistrantCity).Append("\n");
            sb.Append("  RegistrantStateOrProvince: ").Append(RegistrantStateOrProvince).Append("\n");
            sb.Append("  RegistrantPostalCode: ").Append(RegistrantPostalCode).Append("\n");
            sb.Append("  RegistrantCountry: ").Append(RegistrantCountry).Append("\n");
            sb.Append("  RegistrantRawAddress: ").Append(RegistrantRawAddress).Append("\n");
            sb.Append("  RegistrantTelephone: ").Append(RegistrantTelephone).Append("\n");
            sb.Append("  WhoisServer: ").Append(WhoisServer).Append("\n");
            sb.Append("  RawTextRecord: ").Append(RawTextRecord).Append("\n");
            sb.Append("  CreatedDt: ").Append(CreatedDt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WhoisResponse);
        }

        /// <summary>
        /// Returns true if WhoisResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of WhoisResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WhoisResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ValidDomain == input.ValidDomain ||
                    (this.ValidDomain != null &&
                    this.ValidDomain.Equals(input.ValidDomain))
                ) && 
                (
                    this.RegistrantName == input.RegistrantName ||
                    (this.RegistrantName != null &&
                    this.RegistrantName.Equals(input.RegistrantName))
                ) && 
                (
                    this.RegistrantOrganization == input.RegistrantOrganization ||
                    (this.RegistrantOrganization != null &&
                    this.RegistrantOrganization.Equals(input.RegistrantOrganization))
                ) && 
                (
                    this.RegistrantEmail == input.RegistrantEmail ||
                    (this.RegistrantEmail != null &&
                    this.RegistrantEmail.Equals(input.RegistrantEmail))
                ) && 
                (
                    this.RegistrantStreetNumber == input.RegistrantStreetNumber ||
                    (this.RegistrantStreetNumber != null &&
                    this.RegistrantStreetNumber.Equals(input.RegistrantStreetNumber))
                ) && 
                (
                    this.RegistrantStreet == input.RegistrantStreet ||
                    (this.RegistrantStreet != null &&
                    this.RegistrantStreet.Equals(input.RegistrantStreet))
                ) && 
                (
                    this.RegistrantCity == input.RegistrantCity ||
                    (this.RegistrantCity != null &&
                    this.RegistrantCity.Equals(input.RegistrantCity))
                ) && 
                (
                    this.RegistrantStateOrProvince == input.RegistrantStateOrProvince ||
                    (this.RegistrantStateOrProvince != null &&
                    this.RegistrantStateOrProvince.Equals(input.RegistrantStateOrProvince))
                ) && 
                (
                    this.RegistrantPostalCode == input.RegistrantPostalCode ||
                    (this.RegistrantPostalCode != null &&
                    this.RegistrantPostalCode.Equals(input.RegistrantPostalCode))
                ) && 
                (
                    this.RegistrantCountry == input.RegistrantCountry ||
                    (this.RegistrantCountry != null &&
                    this.RegistrantCountry.Equals(input.RegistrantCountry))
                ) && 
                (
                    this.RegistrantRawAddress == input.RegistrantRawAddress ||
                    (this.RegistrantRawAddress != null &&
                    this.RegistrantRawAddress.Equals(input.RegistrantRawAddress))
                ) && 
                (
                    this.RegistrantTelephone == input.RegistrantTelephone ||
                    (this.RegistrantTelephone != null &&
                    this.RegistrantTelephone.Equals(input.RegistrantTelephone))
                ) && 
                (
                    this.WhoisServer == input.WhoisServer ||
                    (this.WhoisServer != null &&
                    this.WhoisServer.Equals(input.WhoisServer))
                ) && 
                (
                    this.RawTextRecord == input.RawTextRecord ||
                    (this.RawTextRecord != null &&
                    this.RawTextRecord.Equals(input.RawTextRecord))
                ) && 
                (
                    this.CreatedDt == input.CreatedDt ||
                    (this.CreatedDt != null &&
                    this.CreatedDt.Equals(input.CreatedDt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ValidDomain != null)
                    hashCode = hashCode * 59 + this.ValidDomain.GetHashCode();
                if (this.RegistrantName != null)
                    hashCode = hashCode * 59 + this.RegistrantName.GetHashCode();
                if (this.RegistrantOrganization != null)
                    hashCode = hashCode * 59 + this.RegistrantOrganization.GetHashCode();
                if (this.RegistrantEmail != null)
                    hashCode = hashCode * 59 + this.RegistrantEmail.GetHashCode();
                if (this.RegistrantStreetNumber != null)
                    hashCode = hashCode * 59 + this.RegistrantStreetNumber.GetHashCode();
                if (this.RegistrantStreet != null)
                    hashCode = hashCode * 59 + this.RegistrantStreet.GetHashCode();
                if (this.RegistrantCity != null)
                    hashCode = hashCode * 59 + this.RegistrantCity.GetHashCode();
                if (this.RegistrantStateOrProvince != null)
                    hashCode = hashCode * 59 + this.RegistrantStateOrProvince.GetHashCode();
                if (this.RegistrantPostalCode != null)
                    hashCode = hashCode * 59 + this.RegistrantPostalCode.GetHashCode();
                if (this.RegistrantCountry != null)
                    hashCode = hashCode * 59 + this.RegistrantCountry.GetHashCode();
                if (this.RegistrantRawAddress != null)
                    hashCode = hashCode * 59 + this.RegistrantRawAddress.GetHashCode();
                if (this.RegistrantTelephone != null)
                    hashCode = hashCode * 59 + this.RegistrantTelephone.GetHashCode();
                if (this.WhoisServer != null)
                    hashCode = hashCode * 59 + this.WhoisServer.GetHashCode();
                if (this.RawTextRecord != null)
                    hashCode = hashCode * 59 + this.RawTextRecord.GetHashCode();
                if (this.CreatedDt != null)
                    hashCode = hashCode * 59 + this.CreatedDt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
