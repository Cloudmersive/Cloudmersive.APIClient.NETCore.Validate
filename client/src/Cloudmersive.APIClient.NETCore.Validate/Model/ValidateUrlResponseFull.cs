/* 
 * validateapi
 *
 * The validation APIs help you validate data. Check if an E-mail address is real. Check if a domain is real. Check up on an IP address, and even where it is located. All this and much more is available in the validation API.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NETCore.Validate.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NETCore.Validate.Model
{
    /// <summary>
    /// Result of validating a URL with full validation
    /// </summary>
    [DataContract]
    public partial class ValidateUrlResponseFull :  IEquatable<ValidateUrlResponseFull>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateUrlResponseFull" /> class.
        /// </summary>
        /// <param name="ValidURL">True if the URL has valid syntax, a valid domain, a valid endpoint, and passes virus scan checks; false otherwise.</param>
        /// <param name="ValidSyntax">True if the URL has valid syntax, false otherwise.</param>
        /// <param name="ValidDomain">True if the domain name is valid and exists, false otherwise.</param>
        /// <param name="ValidEndpoint">True if the endpoint is up and responsive and passes a virus scan check, false otherwise.</param>
        /// <param name="WellFormedURL">Well-formed version of the URL.</param>
        public ValidateUrlResponseFull(bool? ValidURL = default(bool?), bool? ValidSyntax = default(bool?), bool? ValidDomain = default(bool?), bool? ValidEndpoint = default(bool?), string WellFormedURL = default(string))
        {
            this.ValidURL = ValidURL;
            this.ValidSyntax = ValidSyntax;
            this.ValidDomain = ValidDomain;
            this.ValidEndpoint = ValidEndpoint;
            this.WellFormedURL = WellFormedURL;
        }
        
        /// <summary>
        /// True if the URL has valid syntax, a valid domain, a valid endpoint, and passes virus scan checks; false otherwise
        /// </summary>
        /// <value>True if the URL has valid syntax, a valid domain, a valid endpoint, and passes virus scan checks; false otherwise</value>
        [DataMember(Name="ValidURL", EmitDefaultValue=false)]
        public bool? ValidURL { get; set; }

        /// <summary>
        /// True if the URL has valid syntax, false otherwise
        /// </summary>
        /// <value>True if the URL has valid syntax, false otherwise</value>
        [DataMember(Name="Valid_Syntax", EmitDefaultValue=false)]
        public bool? ValidSyntax { get; set; }

        /// <summary>
        /// True if the domain name is valid and exists, false otherwise
        /// </summary>
        /// <value>True if the domain name is valid and exists, false otherwise</value>
        [DataMember(Name="Valid_Domain", EmitDefaultValue=false)]
        public bool? ValidDomain { get; set; }

        /// <summary>
        /// True if the endpoint is up and responsive and passes a virus scan check, false otherwise
        /// </summary>
        /// <value>True if the endpoint is up and responsive and passes a virus scan check, false otherwise</value>
        [DataMember(Name="Valid_Endpoint", EmitDefaultValue=false)]
        public bool? ValidEndpoint { get; set; }

        /// <summary>
        /// Well-formed version of the URL
        /// </summary>
        /// <value>Well-formed version of the URL</value>
        [DataMember(Name="WellFormedURL", EmitDefaultValue=false)]
        public string WellFormedURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ValidateUrlResponseFull {\n");
            sb.Append("  ValidURL: ").Append(ValidURL).Append("\n");
            sb.Append("  ValidSyntax: ").Append(ValidSyntax).Append("\n");
            sb.Append("  ValidDomain: ").Append(ValidDomain).Append("\n");
            sb.Append("  ValidEndpoint: ").Append(ValidEndpoint).Append("\n");
            sb.Append("  WellFormedURL: ").Append(WellFormedURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ValidateUrlResponseFull);
        }

        /// <summary>
        /// Returns true if ValidateUrlResponseFull instances are equal
        /// </summary>
        /// <param name="input">Instance of ValidateUrlResponseFull to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ValidateUrlResponseFull input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ValidURL == input.ValidURL ||
                    (this.ValidURL != null &&
                    this.ValidURL.Equals(input.ValidURL))
                ) && 
                (
                    this.ValidSyntax == input.ValidSyntax ||
                    (this.ValidSyntax != null &&
                    this.ValidSyntax.Equals(input.ValidSyntax))
                ) && 
                (
                    this.ValidDomain == input.ValidDomain ||
                    (this.ValidDomain != null &&
                    this.ValidDomain.Equals(input.ValidDomain))
                ) && 
                (
                    this.ValidEndpoint == input.ValidEndpoint ||
                    (this.ValidEndpoint != null &&
                    this.ValidEndpoint.Equals(input.ValidEndpoint))
                ) && 
                (
                    this.WellFormedURL == input.WellFormedURL ||
                    (this.WellFormedURL != null &&
                    this.WellFormedURL.Equals(input.WellFormedURL))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ValidURL != null)
                    hashCode = hashCode * 59 + this.ValidURL.GetHashCode();
                if (this.ValidSyntax != null)
                    hashCode = hashCode * 59 + this.ValidSyntax.GetHashCode();
                if (this.ValidDomain != null)
                    hashCode = hashCode * 59 + this.ValidDomain.GetHashCode();
                if (this.ValidEndpoint != null)
                    hashCode = hashCode * 59 + this.ValidEndpoint.GetHashCode();
                if (this.WellFormedURL != null)
                    hashCode = hashCode * 59 + this.WellFormedURL.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
